#pragma once

namespace rts { class AActor };



namespace rts {



class Scene {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // *structors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Scene(
        ::rts::AWindow& window
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Scene();



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Actions
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Updates the scene
    ///
    /// Calls actors updates
    //
    ///////////////////////////////////////////////////////////////////////////
    void update();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Draws the scene
    ///
    /// Calls actors draws
    ///
    ///////////////////////////////////////////////////////////////////////////
    void draw() const;



private:

    ::std::vector<::std::shared_ptr<::rts::AACtor>> m_actors;
    ::std::vector<::std::shared_ptr<::rts::AUi>> m_ui;
    ::rts::Clock m_clock;

};



} // namespace rts
