#pragma once

#include <Clock.hpp>
#include <Sound/Music.hpp>
#include <Actor/APickup.hpp>

namespace rts { class Window; }
namespace rts::actor { class AActor; }
namespace rts::actor { class AUi; }



namespace rts {



class Scene {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // *structors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Scene(
        ::rts::Window& window
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Scene();



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Actions
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Updates the scene
    ///
    /// Calls actors updates
    //
    ///////////////////////////////////////////////////////////////////////////
    auto update()
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Draws the scene
    ///
    /// Calls actors draws
    ///
    ///////////////////////////////////////////////////////////////////////////
    void draw() const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Is over
    ///
    /// If window is closed or should close
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto isOver() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Handles each events given by window
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto handleEvent(
        sf::Event& event
    ) -> bool;

    [[ nodiscard ]] auto getEvolution() const
        -> int;

private:

    ::rts::Window& m_window;
    ::std::vector<::std::shared_ptr<::rts::actor::AActor>> m_actors;
    ::std::vector<::std::shared_ptr<::rts::actor::AUi>> m_uis;
    ::rts::Clock m_clock;
    ::rts::sound::Music m_music;
    bool m_isOver{ false };
    float m_lastEnergyLoss;
    float m_lastPickup;
    float m_lastWave;
    uint8_t m_numberOfConsecutiveBook{ 0 };

};



} // namespace rts
