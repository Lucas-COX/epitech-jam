#pragma once

#include <Clock.hpp>

namespace rts { class Window; }
namespace rts { class AActor; }
namespace rts { class AUi; }



namespace rts {



class Scene {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // *structors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Scene(
        ::rts::Window& window
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Scene();



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Actions
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Updates the scene
    ///
    /// Calls actors updates
    //
    ///////////////////////////////////////////////////////////////////////////
    void update();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Draws the scene
    ///
    /// Calls actors draws
    ///
    ///////////////////////////////////////////////////////////////////////////
    void draw() const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Is over
    ///
    /// If window is closed or should close
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto isOver() const
        -> bool;



private:

    ::rts::Window& window;
    ::std::vector<::std::shared_ptr<::rts::AActor>> m_actors;
    ::std::vector<::std::shared_ptr<::rts::AUi>> m_ui;
    ::rts::Clock m_clock;

};



} // namespace rts
