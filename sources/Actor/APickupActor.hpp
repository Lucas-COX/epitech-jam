#pragma once

#include <Actor/AActor.hpp>
#include <Actor/APickup.hpp>
#include <string>



namespace rts::actor {



class APickupActor
    : public ::rts::actor::AActor
    , public ::rts::actor::APickup
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // *structors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit APickupActor(
        const ::std::string& filenameSprite,
        const ::std::string& filenameSound,
        ::rts::actor::APickup::Type type,
        ::std::uint8_t nmemb = 1,
        uint8_t lane = 1
        );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~APickupActor();



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Basics
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    void update(
            ::rts::Time deltaTime,
            const ::rts::actor::Movable &movable
        ) override;

    [[ nodiscard ]] auto getLane() const
        -> uint8_t;

private:
    float m_lastCall;
    uint8_t m_lane;
};



} // namespace rts::actor
