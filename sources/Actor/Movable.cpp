#include <pch.hpp>
#include <Actor/Movable.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// *structors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::rts::actor::Movable::Movable() = default;

///////////////////////////////////////////////////////////////////////////
::rts::actor::Movable::~Movable() = default;



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Position
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::moveRight(
    float offset
)
{
    m_position.x += offset;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::moveLeft(
    float offset
)
{
    m_position.x -= offset;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::moveUp(
    float offset
)
{
    m_position.y -= offset;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::moveDown(
    float offset
)
{
    m_position.y += offset;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::move(
    const ::sf::Vector2<float>& offset
)
{
    m_position += offset;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::move(
    float offsetX,
    float offsetY
)
{
    m_position.x += offsetX;
    m_position.y += offsetY;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::moveX(
    float offset
)
{
    m_position.y += offset;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::moveY(
    float offset
)
{
    m_position.y += offset;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::setPosition(
    const ::sf::Vector2<float> position
)
{
    m_position = position;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::setPosition(
    float positionX,
    float positionY
)
{
    m_position.x = positionX;
    m_position.y = positionY;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::setPositionX(
    float position
)
{
    m_position.x = position;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::setPositionY(
    float position
)
{
    m_position.y = position;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::updatePosition(
    ::rts::Time deltaTime
)
{
    // TODO update position
}

///////////////////////////////////////////////////////////////////////////
auto ::rts::actor::Movable::getPosition() const
    -> const ::sf::Vector2<float>&
{
    return m_position;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Speed
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::setGlobalSpeed(
    float speed
)
{
    Movable::globalSpeed = speed;
}

///////////////////////////////////////////////////////////////////////////
auto ::rts::actor::Movable::getGlobalSpeed()
    -> float
{
    return Movable::globalSpeed;
}

///////////////////////////////////////////////////////////////////////////
void ::rts::actor::Movable::setLocalSpeed(
    float speed
)
{
    m_localSpeed = speed;
}

///////////////////////////////////////////////////////////////////////////
auto ::rts::actor::Movable::getLocalSpeed() const
    -> float
{
    return m_localSpeed;
}
