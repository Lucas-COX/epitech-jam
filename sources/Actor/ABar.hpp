#pragma once

#include <Actor/AUi.hpp>



namespace rts::actor {



class ABar
    : public ::rts::actor::AUi
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // *structors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit ABar(
        const ::std::string& filenameOutside,
        const ::std::string& filenameInside,
        float basePercentage
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~ABar() = 0;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Actions
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    void update(
        ::rts::Time deltaTime,
        const ::rts::actor::Movable& movable
    ) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    void draw(
        ::rts::Window& window
    ) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    void changeValue(
        float newValue
    );

    auto addValue(
        float value
    ) -> float;

    auto subValue(
        float value
    ) -> bool;



private:

    float m_fillPercentage; // value as percentage
    ::rts::actor::Drawable m_insideBar;

};



} // namespace rts::actor
