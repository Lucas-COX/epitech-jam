#pragma once



namespace rts {



class AActor
    : public ::rts::Mouvement
    , public ::rts::Draw
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // *structors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit AActor(
        ::rts::AWindow& window
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~AActor();



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Basics
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Moves the actor
    //
    ///////////////////////////////////////////////////////////////////////////
    void move(
        ::std::int16_t x,
        ::std::int16_t y
    )

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Sets the actor position
    //
    ///////////////////////////////////////////////////////////////////////////
    void setPosition(
        ::std::int16_t x,
        ::std::int16_t y
    )

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Moves the actor
    //
    ///////////////////////////////////////////////////////////////////////////
    void scale(
        ::std::int16_t scale
    )

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Moves the actor
    //
    ///////////////////////////////////////////////////////////////////////////
    void scale(
        ::std::int16_t scale
    )



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Actions
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Updates the actor's state
    //
    ///////////////////////////////////////////////////////////////////////////
    virtual void update() = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Draws the actor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void draw() const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Draws the actor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void onCollides(
        ::std::shared_ptr<::rts::AActor> other
    ) = 0;



private:

};



} // namespace rts
